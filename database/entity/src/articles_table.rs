//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use super::sea_orm_active_enums::ArticleType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, serde::Serialize, serde::Deserialize)]
#[sea_orm(table_name = "articles_table")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub article_uuid: Uuid,
    pub article_visibility: bool,
    pub article_timestamp: DateTime,
    pub article_thumbnail: String,
    pub article_type: ArticleType,
    pub article_author: Uuid,
    pub article_title: String,
    pub article_content: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation, serde::Serialize, serde::Deserialize)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users_table::Entity",
        from = "Column::ArticleAuthor",
        to = "super::users_table::Column::UserUuid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UsersTable,
}

impl Related<super::users_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersTable.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
